package application.service;

import application.model.Product;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class ChatbotService {
    private final GeminiService geminiService;
    private final ObjectMapper objectMapper;
    private List<Product> productData;
    private static final String DATABASE_API_URL = "http://localhost:8081/api/building";

    public ChatbotService() {
        this.geminiService = new GeminiService();
        this.objectMapper = new ObjectMapper();
        loadProductData();
    }

    private void loadProductData() {
        try {
            // G·ª≠i y√™u c·∫ßu l·∫•y 1000 s·∫£n ph·∫©m ƒë·∫ßu ti√™n
            Map<String, String> params = new HashMap<>();
            params.put("page", "1");
            params.put("pageSize", "1000");
            this.productData = ProductClient.fetchWithParams(params);
            System.out.println("ƒê√£ t·∫£i " + productData.size() + " s·∫£n ph·∫©m t·ª´ database");
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ database: " + e.getMessage());
            this.productData = new ArrayList<>(); // Empty list n·∫øu kh√¥ng load ƒë∆∞·ª£c
        }
    }

    public String processUserMessage(String userMessage) {
        try {
            if (productData.isEmpty()) {
                loadProductData();
            }
            String productContext = createProductContext(userMessage);
            return geminiService.generateResponse(userMessage, productContext);
        } catch (Exception e) {
            e.printStackTrace();
            return handleFallbackResponse(userMessage);
        }
    }

    private String createProductContext(String userMessage) {
        if (productData == null || productData.isEmpty()) {
            return "Hi·ªán t·∫°i kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }

        StringBuilder context = new StringBuilder();
        String lowerMessage = userMessage.toLowerCase();
        List<Product> relevantProducts = new ArrayList<>();

        for (Product product : productData) {
            if (isProductRelevant(product, lowerMessage)) {
                relevantProducts.add(product);
            }
        }

        if (!relevantProducts.isEmpty()) {
            context.append("C√°c s·∫£n ph·∫©m li√™n quan:\n\n");
            int count = 0;
            for (Product product : relevantProducts) {
                if (count >= 348) break;
                context.append(formatProductInfo(product)).append("\n\n");
                count++;
            }
        } else {
            context.append("Danh s√°ch m·ªôt s·ªë s·∫£n ph·∫©m c√≥ s·∫µn:\n\n");
            int count = 0;
            for (Product product : productData) {
                if (count >= 348) break;
                context.append(formatProductInfo(product)).append("\n\n");
                count++;
            }
        }

        return context.toString();
    }

    private boolean isProductRelevant(Product product, String lowerMessage) {
        if (containsIgnoreCase(product.brand, lowerMessage)) return true;
        if (containsIgnoreCase(product.model, lowerMessage)) return true;
        if (containsIgnoreCase(product.cpu, lowerMessage)) return true;
        if (containsIgnoreCase(product.gpu, lowerMessage)) return true;
        if (containsIgnoreCase(product.ram, lowerMessage)) return true;
        if (containsIgnoreCase(product.storage, lowerMessage)) return true;
        if (containsIgnoreCase(product.os, lowerMessage)) return true;

        String[] keywords = {
            "laptop", "m√°y t√≠nh", "gaming", "vƒÉn ph√≤ng", "h·ªçc t·∫≠p",
            "gi√° r·∫ª", "cao c·∫•p", "m·ªèng nh·∫π", "c·∫•u h√¨nh cao",
            "intel", "amd", "nvidia", "rtx", "gtx", "ryzen", "core i",
            "dell", "hp", "asus", "acer", "lenovo", "msi", "apple", "macbook"
        };

        for (String keyword : keywords) {
            if (lowerMessage.contains(keyword)) return true;
        }

        if (lowerMessage.contains("gi√°") || lowerMessage.contains("price") ||
            lowerMessage.contains("tri·ªáu") || lowerMessage.contains("ngh√¨n")) {
            return true;
        }

        return false;
    }

    private boolean containsIgnoreCase(String source, String target) {
        return source != null && source.toLowerCase().contains(target);
    }

    private String formatProductInfo(Product product) {
        StringBuilder info = new StringBuilder();

        info.append("üîπ ").append(getValueOrDefault(product.model, "Laptop")).append("\n");
        info.append("‚Ä¢ Th∆∞∆°ng hi·ªáu: ").append(getValueOrDefault(product.brand, "N/A")).append("\n");
        info.append("‚Ä¢ Gi√°: ").append(getValueOrDefault(product.price, "Li√™n h·ªá")).append("\n");
        info.append("‚Ä¢ CPU: ").append(getValueOrDefault(product.cpu, "N/A")).append("\n");
        info.append("‚Ä¢ RAM: ").append(getValueOrDefault(product.ram, "N/A")).append("\n");
        info.append("‚Ä¢ GPU: ").append(getValueOrDefault(product.gpu, "N/A")).append("\n");
        info.append("‚Ä¢ L∆∞u tr·ªØ: ").append(getValueOrDefault(product.storage, "N/A")).append("\n");
        info.append("‚Ä¢ M√†n h√¨nh: ").append(getValueOrDefault(product.displaySize, "N/A")).append("\n");
        info.append("‚Ä¢ H·ªá ƒëi·ªÅu h√†nh: ").append(getValueOrDefault(product.os, "N/A")).append("\n");

        if (product.rate != null && !product.rate.trim().isEmpty()) {
            info.append("‚Ä¢ ƒê√°nh gi√°: ").append(product.rate).append("/5 ‚≠ê\n");
        }

        return info.toString();
    }

    private String getValueOrDefault(String value, String defaultValue) {
        return (value != null && !value.trim().isEmpty()) ? value : defaultValue;
    }

    private String handleFallbackResponse(String userMessage) {
        String lowerMessage = userMessage.toLowerCase();

        if (lowerMessage.contains("xin ch√†o") || lowerMessage.contains("hello") ||
            lowerMessage.contains("hi") || lowerMessage.contains("ch√†o")) {
            return "üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Seventeen's Store. " +
                    "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m laptop. " +
                    "B·∫°n mu·ªën t√¨m laptop nh∆∞ th·∫ø n√†o?";
        }

        if (lowerMessage.contains("gi√°") || lowerMessage.contains("price") ||
            lowerMessage.contains("bao nhi√™u") || lowerMessage.contains("cost")) {
            return "üí∞ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m laptop theo m·ª©c gi√° mong mu·ªën. " +
                    "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt ng√¢n s√°ch c·ªßa b·∫°n kh√¥ng? " +
                    "V√≠ d·ª•: 'laptop d∆∞·ªõi 15 tri·ªáu' ho·∫∑c 'laptop t·ª´ 20-30 tri·ªáu'";
        }

        if (lowerMessage.contains("gaming") || lowerMessage.contains("game") ||
            lowerMessage.contains("ch∆°i game")) {
            return "üéÆ Ch√∫ng t√¥i c√≥ nhi·ªÅu laptop gaming v·ªõi c·∫•u h√¨nh m·∫°nh m·∫Ω! " +
                    "B·∫°n quan t√¢m ƒë·∫øn laptop gaming c·ªßa th∆∞∆°ng hi·ªáu n√†o? " +
                    "MSI, ASUS ROG, Acer Predator hay Dell Alienware?";
        }

        if (lowerMessage.contains("vƒÉn ph√≤ng") || lowerMessage.contains("h·ªçc t·∫≠p") ||
            lowerMessage.contains("office") || lowerMessage.contains("h·ªçc")) {
            return "üìö Ch√∫ng t√¥i c√≥ nhi·ªÅu laptop ph√π h·ª£p cho c√¥ng vi·ªác vƒÉn ph√≤ng v√† h·ªçc t·∫≠p! " +
                    "B·∫°n c·∫ßn laptop m·ªèng nh·∫π, pin l√¢u hay c·∫•u h√¨nh m·∫°nh ƒë·ªÉ x·ª≠ l√Ω ƒëa t√°c v·ª•?";
        }

        if (lowerMessage.contains("th∆∞∆°ng hi·ªáu") || lowerMessage.contains("brand") ||
            lowerMessage.contains("h√£ng")) {
            return "üè¢ Ch√∫ng t√¥i c√≥ laptop t·ª´ nhi·ªÅu th∆∞∆°ng hi·ªáu uy t√≠n: " +
                    "Dell, HP, ASUS, Acer, Lenovo, MSI, Apple MacBook. " +
                    "B·∫°n c√≥ th∆∞∆°ng hi·ªáu y√™u th√≠ch n√†o kh√¥ng?";
        }

        if (lowerMessage.contains("c·∫•u h√¨nh") || lowerMessage.contains("config") ||
            lowerMessage.contains("specs")) {
            return "‚öôÔ∏è T√¥i c√≥ th·ªÉ t∆∞ v·∫•n c·∫•u h√¨nh laptop ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n. " +
                    "B·∫°n s·ª≠ d·ª•ng laptop ƒë·ªÉ l√†m g√¨ ch·ªß y·∫øu? Gaming, vƒÉn ph√≤ng, ƒë·ªì h·ªça hay l·∫≠p tr√¨nh?";
        }

        return "‚ùì Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. " +
                "B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n" +
                "‚Ä¢ Th√¥ng tin s·∫£n ph·∫©m laptop\n" +
                "‚Ä¢ T∆∞ v·∫•n ch·ªçn laptop theo nhu c·∫ßu\n" +
                "‚Ä¢ So s√°nh c·∫•u h√¨nh v√† gi√° c·∫£\n" +
                "‚Ä¢ Khuy·∫øn m√£i hi·ªán t·∫°i\n\n" +
                "H√£y th·ª≠ h·ªèi c·ª• th·ªÉ h∆°n nh√©! üòä";
    }

    public void refreshProductData() {
        loadProductData();
    }

    public boolean isDataAvailable() {
        return productData != null && !productData.isEmpty();
    }

    public int getProductCount() {
        return productData != null ? productData.size() : 0;
    }
}
